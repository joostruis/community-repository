
################################################################################
## cr.packages ###
################################################################################

{{- define "cr.packages" }} 

{{- $packages := list }}

{{- if .opt_requires }}
{{- range .opt_requires }}

{{- $deps := ( include "cr.packages" . ) | splitList " " }}
{{- $packages = $packages | concat $deps }}

{{- end }}
{{- end }}

{{- if .requires }}
{{- range .requires }}

{{- $deps := ( include "cr.packages" . ) | splitList " " }}
{{- $packages = $packages | concat $deps }}

{{- end }}
{{- end }}

{{- $package := printf "\"%s-%s\"" .category .name }}
{{- if not (has $package $packages) }}
{{- $packages = $package | append $packages }}
{{- end }}

{{- $packages = $packages | uniq }}
{{- join " " $packages }}

{{- end }}

################################################################################
## cr.packages ###
################################################################################

{{- define "cr.packagesetup" }}
{{- $package := . }}
- |
  set -x; \
  mkdir -p /etc/portage/package.accept_keywords; \
  if [ -e "package.accept_keywords/{{ $package }}.accept_keywords" ]; then \
    cp -rf package.accept_keywords/{{ $package }}.accept_keywords /etc/portage/package.accept_keywords/{{ $package }}.accept_keywords; \
  fi; \
  mkdir -p /etc/portage/package.license; \
  if [ -e "package.license/{{ $package }}.license" ]; then \
    cp -rf package.license/{{ $package }}.license /etc/portage/package.license/{{ $package }}.license; \
  fi; \
  mkdir -p /etc/portage/package.unmask; \
  if [ -e "package.unmask/{{ $package }}.unmask" ]; then \
    cp -rf package.unmask/{{ $package }}.unmask /etc/portage/package.unmask/{{ $package }}.unmask; \
  fi; \
  mkdir -p /etc/portage/package.use; \
  if [ -e "package.use/{{ $package }}.use" ]; then \
    cp -rf package.use/{{ $package }}.use /etc/portage/package.use/{{ $package }}.use; \
  fi;
{{- end }}

################################################################################
## cr.prereqs ###
################################################################################

{{- define "cr.prereqs" }} 

{{- $commands := list }}
{{- $command := "" }}

{{- if .overlays }}
{{- $command := printf "USE=\"-subversion -mercurial\" emerge app-portage/layman" }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- $command := printf "layman -L" }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- range .overlays }}
{{- if .url }}
{{- $command = printf "echo \"y\" | layman -o %s -f -a %s" .url .name }}
{{- else }}
{{- $command = printf "echo \"y\" | layman -a %s" .name }}
{{- end }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}

{{- if .prepare }}
{{- range .prepare }}
{{- if . }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .prereqs }}
{{- range .prereqs }}
{{- $command := include "cr.emerge" . }}
{{- if $command }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- if .opt_requires }}
{{- range .opt_requires }}

{{- range include "cr.prereqs" . | fromJsonArray }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}

{{- if .atoms }}
{{- range .atoms }}
{{- $command := include "cr.emerge" . }}
{{- if $command }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}
{{- end }}

{{- range .requires }}

{{- range include "cr.prereqs" . | fromJsonArray }}
{{- if not (has . $commands) }}
{{- $commands = append $commands . }}
{{- end }}
{{- end }}

{{- if .setup }}
{{- range .setup }}
{{- if . }}
- {{ . }}
{{- end }}
{{- end }}
{{- end }}

{{ if .preemerge }}
{{ range .preemerge }}
{{ $command := include "cr.emerge" . }}
{{ if $command }}
- {{ $command }}
{{ end }}
{{ end }}
{{ end }}

{{- if .atoms }}
{{- range .atoms }}
{{- $command := include "cr.emerge" . }}
{{- if $command }}
{{- if not (has $command $commands) }}
{{- $commands = append $commands $command }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}

{{- end }}

{{- $commands | toJson }}

{{- end }}

################################################################################
## cr.emerge ###
################################################################################

{{- define "cr.emerge" }}

{{- $command := "" }}

{{- $tokens := . | splitList ";" }}
{{- if eq (len $tokens) 1 }}
{{- $command = printf "emerge -1 -j ${JOBS} %s" (index $tokens 0) }}
{{- else if eq (len $tokens) 2 }}
{{- $command = printf "%s emerge -1 -j ${JOBS} %s" (index $tokens 1) (index $tokens 0) }}
{{- end }}

{{- $command }}

{{- end }}

################################################################################
## flatten ###
################################################################################

{{- define "cr.flatten_list" -}}
  {{- $output := list -}}
  {{- range . -}}
    {{- if (kindIs "slice" . ) -}}
      {{- $output = (concat $output ( get (fromYaml (include "cr.flatten_list" . ) )  "list" ) ) -}}
    {{- else -}}
      {{- $output = (append $output . ) -}}
    {{- end -}}
  {{- end -}}
  {{- toYaml (dict "list" $output) -}}
{{- end -}}

{{- define "cr.flatten" -}}
  {{- get ( fromYaml (include "cr.flatten_list" . ) ) "list"  | toYaml }}
{{- end -}}

{{- define "cr.flatten_map" -}}
  {{- $map := first . -}}
  {{- $label := last . -}}
  {{- range $key, $val := $map -}}
    {{- $sublabel := list $label $key | join "_" | upper -}}
    {{- if kindOf $val | eq "map" -}}
      {{- list $val $sublabel | include "cr.flatten_map" -}}
    {{- else -}}
- name: {{ $sublabel | quote }}
  value: {{ $val | quote }}
  {{- end -}}
{{- end -}}
{{- end -}}

################################################################################
## debug ###
################################################################################

{{- define "cr.dump" }}
{{- . | printf "\nThe output of the dumped var is: \n%s" | fail }}
{{- end }}

{{- define "cr.dumpJson" }}
{{- . | toPrettyJson | printf "\nThe JSON output of the dumped var is: \n%s" | fail }}
{{- end }}
